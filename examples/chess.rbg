#game = "Chess"
// notes:
// - no rules about repeating states or tie after given number of turns without pawn moves
// - game is limited to 180 turns


// #backLine(color) =
//    [color~RookUnmoved, color~Knight, color~Bishop, color~Queen, color~King, color~Bishop, color~Knight, color~RookUnmoved]
// #pawnLine(color) =
//    [color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn]
// #emptyLine =
//    [empty, empty, empty, empty, empty, empty, empty, empty]

// #board =
//     backLine(black)
//     pawnLine(black)
//     emptyLine
//     emptyLine
//     emptyLine
//     emptyLine
//     pawnLine(white)
//     backLine(white)

#board = v00 [whiteRookUnmoved] { m01 : v01, m10 : v10, m11 : v11 }
         v10 [whiteKnight] { mn10 : v00, mn11 : v01, m01 : v11, m10 : v20, m11 : v21 }
         v20 [whiteBishop] { mn10 : v10, mn11 : v11, m01 : v21, m10 : v30, m11 : v31 }
         v30 [whiteQueen] { mn10 : v20, mn11 : v21, m01 : v31, m10 : v40, m11 : v41 }
         v40 [whiteKing] { mn10 : v30, mn11 : v31, m01 : v41, m10 : v50, m11 : v51 }
         v50 [whiteBishop] { mn10 : v40, mn11 : v41, m01 : v51, m10 : v60, m11 : v61 }
         v60 [whiteKnight] { mn10 : v50, mn11 : v51, m01 : v61, m10 : v70, m11 : v71 }
         v70 [whiteRookUnmoved] { mn10 : v60, mn11 : v61, m01 : v71 }
         v01 [whitePawn] { m0n1 : v00, m01 : v02, m1n1 : v10, m10 : v11, m11 : v12 }
         v11 [whitePawn] { mn1n1 : v00, mn10 : v01, mn11 : v02, m0n1 : v10, m01 : v12, m1n1 : v20, m10 : v21, m11 : v22 }
         v21 [whitePawn] { mn1n1 : v10, mn10 : v11, mn11 : v12, m0n1 : v20, m01 : v22, m1n1 : v30, m10 : v31, m11 : v32 }
         v31 [whitePawn] { mn1n1 : v20, mn10 : v21, mn11 : v22, m0n1 : v30, m01 : v32, m1n1 : v40, m10 : v41, m11 : v42 }
         v41 [whitePawn] { mn1n1 : v30, mn10 : v31, mn11 : v32, m0n1 : v40, m01 : v42, m1n1 : v50, m10 : v51, m11 : v52 }
         v51 [whitePawn] { mn1n1 : v40, mn10 : v41, mn11 : v42, m0n1 : v50, m01 : v52, m1n1 : v60, m10 : v61, m11 : v62 }
         v61 [whitePawn] { mn1n1 : v50, mn10 : v51, mn11 : v52, m0n1 : v60, m01 : v62, m1n1 : v70, m10 : v71, m11 : v72 }
         v71 [whitePawn] { mn1n1 : v60, mn10 : v61, mn11 : v62, m0n1 : v70, m01 : v72 }
         v02 [empty] { m0n1 : v01, m01 : v03, m1n1 : v11, m10 : v12, m11 : v13 }
         v12 [empty] { mn1n1 : v01, mn10 : v02, mn11 : v03, m0n1 : v11, m01 : v13, m1n1 : v21, m10 : v22, m11 : v23 }
         v22 [empty] { mn1n1 : v11, mn10 : v12, mn11 : v13, m0n1 : v21, m01 : v23, m1n1 : v31, m10 : v32, m11 : v33 }
         v32 [empty] { mn1n1 : v21, mn10 : v22, mn11 : v23, m0n1 : v31, m01 : v33, m1n1 : v41, m10 : v42, m11 : v43 }
         v42 [empty] { mn1n1 : v31, mn10 : v32, mn11 : v33, m0n1 : v41, m01 : v43, m1n1 : v51, m10 : v52, m11 : v53 }
         v52 [empty] { mn1n1 : v41, mn10 : v42, mn11 : v43, m0n1 : v51, m01 : v53, m1n1 : v61, m10 : v62, m11 : v63 }
         v62 [empty] { mn1n1 : v51, mn10 : v52, mn11 : v53, m0n1 : v61, m01 : v63, m1n1 : v71, m10 : v72, m11 : v73 }
         v72 [empty] { mn1n1 : v61, mn10 : v62, mn11 : v63, m0n1 : v71, m01 : v73 }
         v03 [empty] { m0n1 : v02, m01 : v04, m1n1 : v12, m10 : v13, m11 : v14 }
         v13 [empty] { mn1n1 : v02, mn10 : v03, mn11 : v04, m0n1 : v12, m01 : v14, m1n1 : v22, m10 : v23, m11 : v24 }
         v23 [empty] { mn1n1 : v12, mn10 : v13, mn11 : v14, m0n1 : v22, m01 : v24, m1n1 : v32, m10 : v33, m11 : v34 }
         v33 [empty] { mn1n1 : v22, mn10 : v23, mn11 : v24, m0n1 : v32, m01 : v34, m1n1 : v42, m10 : v43, m11 : v44 }
         v43 [empty] { mn1n1 : v32, mn10 : v33, mn11 : v34, m0n1 : v42, m01 : v44, m1n1 : v52, m10 : v53, m11 : v54 }
         v53 [empty] { mn1n1 : v42, mn10 : v43, mn11 : v44, m0n1 : v52, m01 : v54, m1n1 : v62, m10 : v63, m11 : v64 }
         v63 [empty] { mn1n1 : v52, mn10 : v53, mn11 : v54, m0n1 : v62, m01 : v64, m1n1 : v72, m10 : v73, m11 : v74 }
         v73 [empty] { mn1n1 : v62, mn10 : v63, mn11 : v64, m0n1 : v72, m01 : v74 }
         v04 [empty] { m0n1 : v03, m01 : v05, m1n1 : v13, m10 : v14, m11 : v15 }
         v14 [empty] { mn1n1 : v03, mn10 : v04, mn11 : v05, m0n1 : v13, m01 : v15, m1n1 : v23, m10 : v24, m11 : v25 }
         v24 [empty] { mn1n1 : v13, mn10 : v14, mn11 : v15, m0n1 : v23, m01 : v25, m1n1 : v33, m10 : v34, m11 : v35 }
         v34 [empty] { mn1n1 : v23, mn10 : v24, mn11 : v25, m0n1 : v33, m01 : v35, m1n1 : v43, m10 : v44, m11 : v45 }
         v44 [empty] { mn1n1 : v33, mn10 : v34, mn11 : v35, m0n1 : v43, m01 : v45, m1n1 : v53, m10 : v54, m11 : v55 }
         v54 [empty] { mn1n1 : v43, mn10 : v44, mn11 : v45, m0n1 : v53, m01 : v55, m1n1 : v63, m10 : v64, m11 : v65 }
         v64 [empty] { mn1n1 : v53, mn10 : v54, mn11 : v55, m0n1 : v63, m01 : v65, m1n1 : v73, m10 : v74, m11 : v75 }
         v74 [empty] { mn1n1 : v63, mn10 : v64, mn11 : v65, m0n1 : v73, m01 : v75 }
         v05 [empty] { m0n1 : v04, m01 : v06, m1n1 : v14, m10 : v15, m11 : v16 }
         v15 [empty] { mn1n1 : v04, mn10 : v05, mn11 : v06, m0n1 : v14, m01 : v16, m1n1 : v24, m10 : v25, m11 : v26 }
         v25 [empty] { mn1n1 : v14, mn10 : v15, mn11 : v16, m0n1 : v24, m01 : v26, m1n1 : v34, m10 : v35, m11 : v36 }
         v35 [empty] { mn1n1 : v24, mn10 : v25, mn11 : v26, m0n1 : v34, m01 : v36, m1n1 : v44, m10 : v45, m11 : v46 }
         v45 [empty] { mn1n1 : v34, mn10 : v35, mn11 : v36, m0n1 : v44, m01 : v46, m1n1 : v54, m10 : v55, m11 : v56 }
         v55 [empty] { mn1n1 : v44, mn10 : v45, mn11 : v46, m0n1 : v54, m01 : v56, m1n1 : v64, m10 : v65, m11 : v66 }
         v65 [empty] { mn1n1 : v54, mn10 : v55, mn11 : v56, m0n1 : v64, m01 : v66, m1n1 : v74, m10 : v75, m11 : v76 }
         v75 [empty] { mn1n1 : v64, mn10 : v65, mn11 : v66, m0n1 : v74, m01 : v76 }
         v06 [blackPawn] { m0n1 : v05, m01 : v07, m1n1 : v15, m10 : v16, m11 : v17 }
         v16 [blackPawn] { mn1n1 : v05, mn10 : v06, mn11 : v07, m0n1 : v15, m01 : v17, m1n1 : v25, m10 : v26, m11 : v27 }
         v26 [blackPawn] { mn1n1 : v15, mn10 : v16, mn11 : v17, m0n1 : v25, m01 : v27, m1n1 : v35, m10 : v36, m11 : v37 }
         v36 [blackPawn] { mn1n1 : v25, mn10 : v26, mn11 : v27, m0n1 : v35, m01 : v37, m1n1 : v45, m10 : v46, m11 : v47 }
         v46 [blackPawn] { mn1n1 : v35, mn10 : v36, mn11 : v37, m0n1 : v45, m01 : v47, m1n1 : v55, m10 : v56, m11 : v57 }
         v56 [blackPawn] { mn1n1 : v45, mn10 : v46, mn11 : v47, m0n1 : v55, m01 : v57, m1n1 : v65, m10 : v66, m11 : v67 }
         v66 [blackPawn] { mn1n1 : v55, mn10 : v56, mn11 : v57, m0n1 : v65, m01 : v67, m1n1 : v75, m10 : v76, m11 : v77 }
         v76 [blackPawn] { mn1n1 : v65, mn10 : v66, mn11 : v67, m0n1 : v75, m01 : v77 }
         v07 [blackRookUnmoved] { m0n1 : v06, m1n1 : v16, m10 : v17 }
         v17 [blackKnight] { mn1n1 : v06, mn10 : v07, m0n1 : v16, m1n1 : v26, m10 : v27 }
         v27 [blackBishop] { mn1n1 : v16, mn10 : v17, m0n1 : v26, m1n1 : v36, m10 : v37 }
         v37 [blackQueen] { mn1n1 : v26, mn10 : v27, m0n1 : v36, m1n1 : v46, m10 : v47 }
         v47 [blackKing] { mn1n1 : v36, mn10 : v37, m0n1 : v46, m1n1 : v56, m10 : v57 }
         v57 [blackBishop] { mn1n1 : v46, mn10 : v47, m0n1 : v56, m1n1 : v66, m10 : v67 }
         v67 [blackKnight] { mn1n1 : v56, mn10 : v57, m0n1 : v66, m1n1 : v76, m10 : v77 }
         v77 [blackRookUnmoved] { mn1n1 : v66, mn10 : v67, m0n1 : v76 }

#mn7n7 = mn1n1  mn1n1  mn1n1  mn1n1  mn1n1  mn1n1  mn1n1
#mn2n1 = mn1n1  mn10
#mn20 = mn1n1  mn11
#mn21 = mn10  mn11
#mn1n2 = m0n1  mn1n1
#mn12 = mn11  m01
#m1n2 = m1n1  m0n1
#m12 = m11  m01
#m2n1 = m1n1  m10
#m21 = m11  m10
#m30 = m10  m10  m10

#anyRook(color) = color~RookMoved, color~RookUnmoved
#majorPieces(color) = color~RookMoved, color~Knight, color~Bishop, color~Queen
#singleColorPieces(color) = color~Pawn, color~King, anyRook(color), color~Knight, color~Bishop, color~Queen
#emptyOrColor(color) = singleColorPieces(color), empty
#allPieces = singleColorPieces(white), singleColorPieces(black)

#players = white(11), black(11)
#pieces = allPieces, empty
#variables = pawnDoubleMove(2), whiteKingMoved(2), blackKingMoved(2), turn(202)

//#anySquare = ((m10 ^*+mn10 ^*)(m01 ^*+m0n1 ^*))
#anySquare = (m10 ^*m01 ^*mn7n7 m10 ^*m01 ^*)

#anyNeighborSquare =
    (
        m10
      + m01
      + mn10
      + m0n1
      + m11
      + mn11
      + m1n1
      + mn1n1
    )

#diagonalLine =
    (
        (m11 {empty})^*m11
      + (m1n1 {empty})^*m1n1
      + (mn11 {empty})^*mn11
      + (mn1n1 {empty})^*mn1n1
    )

#parallelLine =
    (
        (m10 {empty})^*m10
      + (m01 {empty})^*m01
      + (mn10 {empty})^*mn10
      + (m0n1 {empty})^*m0n1
    )

#anyDirectionLine =
    (
        diagonalLine
      + parallelLine
    )

#knightHop =
    (
        m12
      + m1n2
      + mn12
      + mn1n2
      + m21
      + m2n1
      + mn21
      + mn2n1
    )

#captureAnyBy(capturingPiece; opponentColor) =
    {emptyOrColor(opponentColor)}
    [capturingPiece]

#pickUpPiece(piece) =
    {piece}[empty]

#standardMove(piece; movePattern; opponentColor) =
    pickUpPiece(piece)
    movePattern
    captureAnyBy(piece; opponentColor)

#bishopMove(color; opponentColor) = standardMove(color~Bishop; diagonalLine; opponentColor)
#knightMove(color; opponentColor) = standardMove(color~Knight; knightHop; opponentColor)
#queenMove(color; opponentColor) = standardMove(color~Queen; anyDirectionLine; opponentColor)

#rookMove(color; opponentColor) =
    pickUpPiece(anyRook(color))
    parallelLine
    captureAnyBy(color~RookMoved; opponentColor)

#standardKingMove(color; opponentColor) =
    standardMove(color~King; anyNeighborSquare; opponentColor)
    [$color~KingMoved=1]

#isAttackedByBishop(opponentColor) = diagonalLine {opponentColor~Bishop}
#isAttackedByBishopOrQueen(opponentColor) = diagonalLine {opponentColor~Bishop,opponentColor~Queen}
#isAttackedByRook(opponentColor) = parallelLine {anyRook(opponentColor)}
#isAttackedByRookOrQueen(opponentColor) = parallelLine {anyRook(opponentColor),opponentColor~Queen}
#isAttackedByQueen(opponentColor) = anyDirectionLine {opponentColor~Queen}
#isAttackedByKnight(opponentColor) = knightHop {opponentColor~Knight}
#isAttackedByKing(opponentColor) = anyNeighborSquare {opponentColor~King}
#isAttackedByPawn(opponentColor; forwardDirection) =
    (m10 forwardDirection + mn10 forwardDirection){opponentColor~Pawn}

#isNotAttackedBy(opponentColor; forwardDirection) =
    (!
        isAttackedByBishopOrQueen(opponentColor)
      + isAttackedByRookOrQueen(opponentColor)
//      + isAttackedByQueen(opponentColor)
      + isAttackedByKnight(opponentColor)
      + isAttackedByKing(opponentColor)
      + isAttackedByPawn(opponentColor; forwardDirection)
    )

#checked(color; opponentColor; forwardDirection) =
    (
        anySquare
        {color~King}
        (
            isAttackedByBishopOrQueen(opponentColor)
          + isAttackedByRookOrQueen(opponentColor)
//          + isAttackedByQueen(opponentColor)
          + isAttackedByKnight(opponentColor)
          + isAttackedByKing(opponentColor)
          + isAttackedByPawn(opponentColor; forwardDirection)
        )
    )

#castlingKingMove(forwardDirection; color; opponentColor) =
    (? $color~KingMoved==0)
    pickUpPiece(color~King)
    (
        m10 {empty}isNotAttackedBy(opponentColor; forwardDirection)
        m10 {empty}//isNotAttackedBy(opponentColor; forwardDirection)
        [color~King]
        m10 pickUpPiece(color~RookUnmoved)
        mn20
      + mn10 {empty}isNotAttackedBy(opponentColor; forwardDirection)
        mn10 {empty}//isNotAttackedBy(opponentColor; forwardDirection)
        [color~King]
        mn10 {empty} // rook CAN pass through attacked square
        mn10 pickUpPiece(color~RookUnmoved)
        m30
    )
    [color~RookMoved]
    [$color~KingMoved=1]

#kingMove(forwardDirection; color; opponentColor) =
    (
        castlingKingMove(forwardDirection; color; opponentColor)
      + standardKingMove(color; opponentColor)
        //isNotAttackedBy(opponentColor; forwardDirection)
    )

#checkForPromotion(forwardDirection; color) =
    (
        (? forwardDirection)[color~Pawn]
      > [majorPieces(color)]
    )

#standardPawnMove(forwardDirection; backDirection; color; opponentColor) =
    pickUpPiece(color~Pawn)
    (
        // promotion cannot occur
        (! backDirection backDirection)
        forwardDirection {empty}
        forwardDirection {empty}
        [color~Pawn]
        [$pawnDoubleMove=1]
      + (
            forwardDirection {empty}
          + (m10 forwardDirection + mn10 forwardDirection){singleColorPieces(opponentColor)}
        )
        checkForPromotion(forwardDirection; color)
    )

#enPassantPawnMove(forwardDirection; color) =
    (? $pawnDoubleMove==1)
    (
        // we are sure that adjacent cell is occupied by opponentColor~Pawn, because pawnDoubleMove==1, so don't check it
        m10 pickUpPiece(color~Pawn)
        mn10 [empty]
        forwardDirection
      + mn10 pickUpPiece(color~Pawn)
        m10 [empty]
        forwardDirection
    )
    [$pawnDoubleMove=0]
    [color~Pawn]

#allMoves(forwardDirection; backDirection; color; opponentColor) =
    (
        [$pawnDoubleMove=0]
        anySquare
        (
            bishopMove(color; opponentColor)
          + rookMove(color; opponentColor)
          + knightMove(color; opponentColor)
          + queenMove(color; opponentColor)
          + kingMove(forwardDirection; color; opponentColor)
          + standardPawnMove(forwardDirection; backDirection; color; opponentColor)
        )
      + enPassantPawnMove(forwardDirection; color)
    ) (! checked(color; opponentColor; forwardDirection))
    ->
    (
        (? $turn<=200)
      > [$color=5,$opponentColor=5]->()
    )
    ->
    (
        checked(opponentColor; color; backDirection) [$color=10,$opponentColor=0]
        > [$color=5,$opponentColor=5]
    )
    ->opponentColor


#rules =
    ->white
    (
        allMoves(m01;m0n1;white;black)
        [$turn = $turn + 1]
        allMoves(m0n1;m01;black;white)
        [$turn = $turn + 1]
    )^*



