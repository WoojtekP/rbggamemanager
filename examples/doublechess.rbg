#game = "Chess"
// notes:
// - no rules about repeating states or tie after given number of turns without pawn moves
// - game is limited to 180 turns


//#backLine(color) =
//    [color~RookUnmoved, color~Knight, color~Bishop, color~Queen, color~King, color~Bishop, color~Knight, color~RookUnmoved]
//#pawnLine(color) =
//    [color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn]
//#emptyLine =
//    [empty, empty, empty, empty, empty, empty, empty, empty]
#backLine(color) =
    [color~RookUnmoved, color~Knight, color~Bishop, color~Queen, color~KingUnmoved, color~Bishop, color~Knight, color~RookUnmoved, color~RookUnmoved, color~Knight, color~Bishop, color~Queen, color~KingUnmoved, color~Bishop, color~Knight, color~RookUnmoved]
#pawnLine(color) =
    [color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn]
#emptyLine =
    [empty, empty, empty, empty, empty, empty, empty, empty, empty, empty, empty, empty, empty, empty, empty, empty]

#bound = 1000000

#board =
    backLine(black)
    pawnLine(black)
    emptyLine
    emptyLine
    emptyLine
    emptyLine
    emptyLine
    emptyLine
    emptyLine
    emptyLine
    pawnLine(white)
    backLine(white)

#anyRook(color) = color~RookMoved, color~RookUnmoved
#anyKing(color) = color~KingMoved, color~KingUnmoved
#majorPieces(color) = color~RookMoved, color~Knight, color~Bishop, color~Queen
#singleColorPieces(color) = color~Pawn, anyKing(color), anyRook(color), color~Knight, color~Bishop, color~Queen
#emptyOrColor(color) = singleColorPieces(color), empty
#allPieces = singleColorPieces(white), singleColorPieces(black)

#players = white, black
#pieces = allPieces, empty
#variables = pawnDoubleMove, turn

#anySquare = (((1,0)^*+(-1,0)^*)((0,1)^*+(0,-1)^*))

#anyNeighborSquare =
    (
        ( 1, 0)
      + ( 0, 1)
      + (-1, 0)
      + ( 0,-1)
      + ( 1, 1)
      + (-1, 1)
      + ( 1,-1)
      + (-1,-1)
    )

#diagonalLine =
    (
        (( 1, 1)(empty))^*( 1, 1)
      + (( 1,-1)(empty))^*( 1,-1)
      + ((-1, 1)(empty))^*(-1, 1)
      + ((-1,-1)(empty))^*(-1,-1)
    )

#parallelLine =
    (
        (( 1, 0)(empty))^*( 1, 0)
      + (( 0, 1)(empty))^*( 0, 1)
      + ((-1, 0)(empty))^*(-1, 0)
      + (( 0,-1)(empty))^*( 0,-1)
    )

#anyDirectionLine =
    (
        diagonalLine
      + parallelLine
    )

#knightHop =
    (
        ( 1, 2)
      + ( 1,-2)
      + (-1, 2)
      + (-1,-2)
      + ( 2, 1)
      + ( 2,-1)
      + (-2, 1)
      + (-2,-1)
    )

#captureAnyBy(capturingPiece; opponentColor) =
    (emptyOrColor(opponentColor))
    [capturingPiece]

#pickUpPiece(piece) =
    (piece)[empty]

#standardMove(piece; movePattern; opponentColor) =
    pickUpPiece(piece)
    movePattern
    captureAnyBy(piece; opponentColor)

#bishopMove(color; opponentColor) = standardMove(color~Bishop; diagonalLine; opponentColor)
#knightMove(color; opponentColor) = standardMove(color~Knight; knightHop; opponentColor)
#queenMove(color; opponentColor) = standardMove(color~Queen; anyDirectionLine; opponentColor)

#rookMove(color; opponentColor) =
    pickUpPiece(anyRook(color))
    parallelLine
    captureAnyBy(color~RookMoved; opponentColor)

#standardKingMove(color; opponentColor) =
    pickUpPiece(anyKing(color))
    parallelLine
    captureAnyBy(color~KingMoved; opponentColor)

#isAttackedByBishop(opponentColor) = diagonalLine(opponentColor~Bishop)
#isAttackedByBishopOrQueen(opponentColor) = diagonalLine(opponentColor~Bishop,opponentColor~Queen)
#isAttackedByRook(opponentColor) = parallelLine(anyRook(opponentColor))
#isAttackedByRookOrQueen(opponentColor) = parallelLine(anyRook(opponentColor),opponentColor~Queen)
#isAttackedByQueen(opponentColor) = anyDirectionLine(opponentColor~Queen)
#isAttackedByKnight(opponentColor) = knightHop(opponentColor~Knight)
#isAttackedByKing(opponentColor) = anyNeighborSquare(anyKing(opponentColor))
#isAttackedByPawn(opponentColor; forwardDirection) =
    ((1, forwardDirection 1) + (-1, forwardDirection 1))(opponentColor~Pawn)

#isNotAttackedBy(opponentColor; forwardDirection) =
    (!
        isAttackedByBishopOrQueen(opponentColor)
      + isAttackedByRookOrQueen(opponentColor)
//      + isAttackedByQueen(opponentColor)
      + isAttackedByKnight(opponentColor)
      + isAttackedByKing(opponentColor)
      + isAttackedByPawn(opponentColor; forwardDirection)
    )

#checked(color; opponentColor; forwardDirection) =
    (
        anySquare
        (anyKing(color))
        (
            isAttackedByBishopOrQueen(opponentColor)
          + isAttackedByRookOrQueen(opponentColor)
//          + isAttackedByQueen(opponentColor)
          + isAttackedByKnight(opponentColor)
          + isAttackedByKing(opponentColor)
          + isAttackedByPawn(opponentColor; forwardDirection)
        )
    )

#castlingKingMove(forwardDirection; color; opponentColor) =
    pickUpPiece(color~KingUnmoved)
    (
        (1,0)(empty)isNotAttackedBy(opponentColor; forwardDirection)
        (1,0)(empty)//isNotAttackedBy(opponentColor; forwardDirection)
        [color~KingMoved]
        (1,0)pickUpPiece(color~RookUnmoved)
        (-2,0)
      + (-1,0)(empty)isNotAttackedBy(opponentColor; forwardDirection)
        (-1,0)(empty)//isNotAttackedBy(opponentColor; forwardDirection)
        [color~KingMoved]
        (-1,0)(empty) // rook CAN pass through attacked square
        (-1,0)pickUpPiece(color~RookUnmoved)
        (3,0)
    )
    [color~RookMoved]

#kingMove(forwardDirection; color; opponentColor) =
    (
        castlingKingMove(forwardDirection; color; opponentColor)
      + standardKingMove(color; opponentColor)
        //isNotAttackedBy(opponentColor; forwardDirection)
    )

#checkForPromotion(forwardDirection; color) =
    (
        (?(0, forwardDirection 1))[color~Pawn]
      + (!(0, forwardDirection 1))[majorPieces(color)]
    )

#standardPawnMove(forwardDirection; backDirection; color; opponentColor) =
    pickUpPiece(color~Pawn)
    (
        // promotion cannot occur
        (!(0, backDirection 2))
        (
            (0, forwardDirection 1)(empty)
            (0, forwardDirection 1)(empty)
          + (0, forwardDirection 1)(empty)
            (0, forwardDirection 1)(empty)
            (0, forwardDirection 1)(empty)
          + (0, forwardDirection 1)(empty)
            (0, forwardDirection 1)(empty)
            (0, forwardDirection 1)(empty)
            (0, forwardDirection 1)(empty)
        )
        [color~Pawn]
        [$pawnDoubleMove=1]
      + (
            (0, forwardDirection 1)(empty)
          + ((1, forwardDirection 1)+(-1, forwardDirection 1))(singleColorPieces(opponentColor))
        )
        checkForPromotion(forwardDirection; color)
    )

#enPassant(forwardDirection; color; distanceFromCaptured; distanceFromBoardEdge) =
    (? (0,forwardDirection distanceFromBoardEdge))
    [empty]
    (0,forwardDirection distanceFromCaptured)
    [color~Pawn]
    (1,0)
    pickUpPiece(color~Pawn)

#enPassantPawnMove(forwardDirection; color) =
    (? $pawnDoubleMove==1)
    (
        enPassant(forwardDirection; color; 0; 5)
      + enPassant(forwardDirection; color; 1; 4)
      + enPassant(forwardDirection; color; 2; 3)
    )
    [$pawnDoubleMove=0]

#allMoves(forwardDirection; backDirection; color; opponentColor) =
    (
        [$pawnDoubleMove=0]
        anySquare
        (
            bishopMove(color; opponentColor)
          + rookMove(color; opponentColor)
          + knightMove(color; opponentColor)
          + queenMove(color; opponentColor)
          + kingMove(forwardDirection; color; opponentColor)
          + standardPawnMove(forwardDirection; backDirection; color; opponentColor)
        )
      + enPassantPawnMove(forwardDirection; color)
    ) (! checked(color; opponentColor; forwardDirection))
    ->
    (
        (? $turn<=200)
      + (? $turn>200)[$color=5,$opponentColor=5]->()
    )
    ->
    (
        (! checked(opponentColor; color; backDirection))[$color=5,$opponentColor=5]
      + (? checked(opponentColor; color; backDirection))[$color=10,$opponentColor=0]
    )
    ->opponentColor


#rules =
    ->white
    (
        allMoves(+;-;white;black)
        [$turn = $turn + 1]
        allMoves(-;+;black;white)
        [$turn = $turn + 1]
    )^*


